#!/usr/bin/env groovy

def COLOR_MAP = [
    'SUCCESS': 'good',
    'FAILURE': 'danger'
]

def prod_secrets = [
    [path: 'ai/back/dev', engineVersion: 2, secretValues: [
        [envVar: 'OPEN_AI_API_KEY', vaultKey: 'OPEN_AI_API_KEY'],
        [envVar: 'DATABASE_TYPE', vaultKey: 'DATABASE_TYPE'],
        [envVar: 'DATABASE_HOST', vaultKey: 'DATABASE_HOST'],
        [envVar: 'DATABASE_PORT', vaultKey: 'DATABASE_PORT'],
        [envVar: 'DATABASE_PASSWORD', vaultKey: 'DATABASE_PASSWORD'],
        [envVar: 'DATABASE_NAME', vaultKey: 'DATABASE_NAME'],
        [envVar: 'DATABASE_USERNAME', vaultKey: 'DATABASE_USERNAME'],
        [envVar: 'DATABASE_SYNCHRONIZE', vaultKey: 'DATABASE_SYNCHRONIZE'],
        [envVar: 'NPM_TOKEN', vaultKey: 'NPM_TOKEN'],
        [envVar: 'BACKEND_URL', vaultKey: 'BACKEND_URL'],
        [envVar: 'FRONTEND_URL', vaultKey: 'FRONTEND_URL'],
        [envVar: 'PORT', vaultKey: 'PORT'],
        [envVar: 'GQL_PLAYGROUND', vaultKey: 'GQL_PLAYGROUND'],
        [envVar: 'GQL_DEBUG', vaultKey: 'GQL_DEBUG'],
        [envVar: 'JWT_KEY', vaultKey: 'JWT_KEY'],
        [envVar: 'JWT_ACCESS_EXPIRE', vaultKey: 'JWT_ACCESS_EXPIRE'],
        [envVar: 'JWT_REFRESH_EXPIRE', vaultKey: 'JWT_REFRESH_EXPIRE'],
        [envVar: 'TOKEN_WORKIZ', vaultKey: 'TOKEN_WORKIZ'],
        [envVar: 'CTM_USER', vaultKey: 'CTM_USER'],
        [envVar: 'CTM_PASSWORD', vaultKey: 'CTM_PASSWORD'],
        [envVar: 'CTM_API_URL', vaultKey: 'CTM_API_URL'],
        [envVar: 'CTM_ACCOUNT_ID', vaultKey: 'CTM_ACCOUNT_ID'],
        [envVar: 'MAIL_FROM',  vaultKey: 'MAIL_FROM'],
        [envVar: 'MAIL_HOST',  vaultKey: 'MAIL_HOST'],
        [envVar: 'MAIL_PASSWORD',  vaultKey: 'MAIL_PASSWORD'],
        [envVar: 'MAIL_USER',  vaultKey: 'MAIL_USER']
    ]],
]

def configuration = [vaultUrl: 'https://vault.tech-slk.com',  vaultCredentialId: 'jenkins-vault-role', engineVersion: 2]

pipeline {
    agent {
        node {
            label 'master'
        }
    }
    environment {
        SLACK_CHANNEL = 'ai'
    }
    options {
        ansiColor('xterm')
        buildDiscarder(logRotator(numToKeepStr: '3', artifactNumToKeepStr: '3'))
        disableConcurrentBuilds()
    }
    stages {
        stage('Prepare Build Version') {
            agent {
                node {
                    label 'master'
                }
            }
            steps {
                slackSend channel: SLACK_CHANNEL,
                          color: 'good',
                          message: "${env.JOB_NAME} - #${env.BUILD_NUMBER} build started \n More information at: ${env.BUILD_URL}"
            }
        }
        stage('Build and Run PROD') {
            agent {
                node {
                    label 'crm-fe-dev'
                }
            }
            steps {
                withVault([configuration: configuration, vaultSecrets: prod_secrets]) {
                    sh '''
                        sudo rm -rf .env

                        echo "OPEN_AI_API_KEY=${OPEN_AI_API_KEY}" >> .env
                        echo "DATABASE_TYPE=${DATABASE_TYPE}" >> .env
                        echo "DATABASE_HOST=${DATABASE_HOST}" >> .env
                        echo "DATABASE_PORT=${DATABASE_PORT}" >> .env
                        echo "DATABASE_PASSWORD=${DATABASE_PASSWORD}" >> .env
                        echo "DATABASE_NAME=${DATABASE_NAME}" >> .env
                        echo "DATABASE_USERNAME=${DATABASE_USERNAME}" >> .env
                        echo "DATABASE_SYNCHRONIZE=${DATABASE_SYNCHRONIZE}" >> .env
                        echo "BACKEND_URL=${BACKEND_URL}" >> .env
                        echo "FRONTEND_URL=${FRONTEND_URL}" >> .env
                        echo "PORT=${PORT}" >> .env
                        echo "GQL_PLAYGROUND=${GQL_PLAYGROUND}" >> .env
                        echo "GQL_DEBUG=${GQL_DEBUG}" >> .env
                        echo "JWT_KEY=${JWT_KEY}" >> .env
                        echo "JWT_ACCESS_EXPIRE=${JWT_ACCESS_EXPIRE}" >> .env
                        echo "JWT_REFRESH_EXPIRE=${JWT_REFRESH_EXPIRE}" >> .env
                        echo "TOKEN_WORKIZ=${TOKEN_WORKIZ}" >> .env
                        echo "CTM_USER=${CTM_USER}" >> .env
                        echo "CTM_PASSWORD="'"'"${CTM_PASSWORD}"'"' >> .env
                        echo "CTM_API_URL=${CTM_API_URL}" >> .env
                        echo "CTM_ACCOUNT_ID=${CTM_ACCOUNT_ID}" >> .env
                        echo "MAIL_FROM=${MAIL_FROM}" >> .env
                        echo "MAIL_HOST=${MAIL_HOST}" >> .env
                        echo "MAIL_PASSWORD=${MAIL_PASSWORD}" >> .env
                        echo "MAIL_USER=${MAIL_USER}" >> .env



                        sudo docker-compose build --no-cache --build-arg NPM_TOKEN=${NPM_TOKEN} prod
                        sudo docker-compose up -d
                        sudo docker system prune -f
                    '''
                }
            }
        }
    }
    post {
        always {
            slackSend channel: SLACK_CHANNEL,
                      color: COLOR_MAP[currentBuild.currentResult],
                      message: "*${currentBuild.currentResult}:* ${env.JOB_NAME} build ${env.BUILD_NUMBER} \n More information at: ${env.BUILD_URL}"
        }
    }
}
